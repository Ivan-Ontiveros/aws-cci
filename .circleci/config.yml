version: 2.1

orbs:
  node: circleci/node@5.1.0
  aws-cli: circleci/aws-cli@3.1.0

jobs:
  build:
    docker:
      - image: cimg/node:20.5.0
    working_directory: .
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Print Working Directory
          command: pwd
      - run:
          name: Build ViteJS App
          command: npm run build
      - run:
          name: Generate buildCommitSHA.txt
          command: echo $CIRCLE_SHA1 > dist/buildCommitSHA.txt
      - persist_to_workspace:
          root: .
          paths:
            - dist

  deploy:
    docker:
      - image: ubuntu:20.04
    working_directory: .
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI setup dependencies
          command: |
            apt-get update && apt-get install -y curl unzip
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Print Working Directory
          command: pwd
      - run:
          name: Nuke the S3 Bucket
          command: |
            # Remove all objects in the S3 bucket
            aws s3 rm s3://iodev-aws-cci-poc/ --recursive
      - run:
          name: Create New Folder Structure
          command: |
            # Create the live and backup folders
            aws s3api put-object --bucket iodev-aws-cci-poc --key live/
            aws s3api put-object --bucket iodev-aws-cci-poc --key backup/
      - run:
          name: Backup Current Live to Backup Folder
          command: |
            # Check if the live folder has any content
            if aws s3 ls s3://iodev-aws-cci-poc/live/ | grep -q "PRE"; then
              echo "Live folder is not empty, moving content to backup..."
              aws s3 mv s3://iodev-aws-cci-poc/live/ s3://iodev-aws-cci-poc/backup/ --recursive
            else
              echo "Live folder is empty, skipping backup..."
            fi
      - run:
          name: Clean Up Live Directory
          command: |
            # Clear the live folder
            aws s3 rm s3://iodev-aws-cci-poc/live/ --recursive
      - run:
          name: Deploy New Build to Live with Cache-Control Headers
          command: |
            # Copy the top-level files from dist/ with no-cache headers
            aws s3 cp dist/ s3://iodev-aws-cci-poc/live/ --recursive --exclude "assets/*" --cache-control "no-cache, no-store, must-revalidate"

            # Copy the assets folder with default cache settings
            aws s3 cp dist/assets/ s3://iodev-aws-cci-poc/live/assets/ --recursive
      - run:
          name: Invalidate CloudFront Cache
          command: |
            aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths "/*"

  rollback:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install AWS CLI setup dependencies
          command: |
            apt-get update && apt-get install -y curl unzip
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Print Working Directory
          command: pwd
      - run:
          name: Look in Directory
          command: ls -ltr
      - run:
          name: Rollback to Previous Version
          command: |
            # Clear the live folder
            aws s3 rm s3://iodev-aws-cci-poc/live/ --recursive

            # Restore the assets folder with default cache settings
            aws s3 cp s3://iodev-aws-cci-poc/backup/assets/ s3://iodev-aws-cci-poc/live/assets/ --recursive

            # Restore the backup to the live folder with no-cache headers
            aws s3 cp s3://iodev-aws-cci-poc/backup/ s3://iodev-aws-cci-poc/live/ --recursive --exclude "assets/*" --cache-control "no-cache, no-store, must-revalidate"

            # Invalidate the CloudFront cache to serve the rolled-back build
            aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths "/*"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - hold_for_rollback:
          type: approval
          requires:
            - deploy
          filters:
            branches:
              only: master
      - rollback:
          requires:
            - hold_for_rollback
          filters:
            branches:
              only: master
