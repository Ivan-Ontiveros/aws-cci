version: 2.1

orbs:
  node: circleci/node@5.1.0
  aws-cli: circleci/aws-cli@3.1.0

jobs:
  build:
    docker:
      - image: cimg/node:20.5.0
    working_directory: .
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Print Working Directory
          command: pwd
      - run:
          name: Build ViteJS App
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist

  deploy:
    docker:
      - image: ubuntu:20.04
    working_directory: .
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI setup dependencies
          command: |
            apt-get update && apt-get install -y curl unzip
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Print Working Directory
          command: pwd
      - run:
          name: Look in Directory
          command: ls -ltr
      - run:
          name: Backup Previous Build
          command: |
            # Empty the prod_bak directory
            aws s3 rm s3://iodev-aws-cci-poc/prod_bak/ --recursive
            # Move the latest build from prod_live to prod_bak
            aws s3 mv s3://iodev-aws-cci-poc/prod_live/ s3://iodev-aws-cci-poc/prod_bak/ --recursive --exclude "current/*"
      - run:
          name: Clean Up prod_live Directory
          command: |
            # Remove all files and folders in prod_live except the current folder
            aws s3 rm s3://iodev-aws-cci-poc/prod_live/ --recursive --exclude "current/*"
      - run:
          name: Create Build Folder with Git SHA
          command: mkdir -p build_$CIRCLE_SHA1 && mv dist/* build_$CIRCLE_SHA1
      # - run:
      #     name: Rename Build Folder with Git SHA
      #     command: |
      #       export GIT_SHA=$(git rev-parse --short HEAD)
      #       mv dist "build_${GIT_SHA}"
      #       echo "export BUILD_DIR=build_${GIT_SHA}" >> $BASH_ENV
      - run:
          name: Look in Directory
          command: ls -ltr
      - run:
          name: Deploy to S3
          command: |
            aws s3 cp --recursive "./build_${CIRCLE_SHA1}" "s3://iodev-aws-cci-poc/prod_live/build_${CIRCLE_SHA1}/"
            aws s3 cp --recursive "./build_${CIRCLE_SHA1}" "s3://iodev-aws-cci-poc/prod_live/current/"
      - run:
          name: Invalidate CloudFront Cache
          command: |
            aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths "/*"

  rollback:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install AWS CLI setup dependencies
          command: |
            apt-get update && apt-get install -y curl unzip
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Print Working Directory
          command: pwd
      - run:
          name: Look in Directory
          command: ls -ltr
      - run:
          name: Rollback to Previous Version
          command: |
            # Empty the prod_live directory
            aws s3 rm s3://iodev-aws-cci-poc/prod_live/ --recursive --exclude "current/*"

            # Move the backup from prod_bak to prod_live
            aws s3 cp --recursive s3://iodev-aws-cci-poc/prod_bak/ s3://iodev-aws-cci-poc/prod_live/

            # Extract the latest build directory name
            LATEST_BUILD_DIR=$(aws s3 ls s3://iodev-aws-cci-poc/prod_live/ | grep 'build_' | sort | tail -n 1 | awk '{print $2}' | sed 's|/$||')
            echo "Latest Build Directory: ${LATEST_BUILD_DIR}"

            # Copy files from the latest build directory to current
            aws s3 cp --recursive "s3://iodev-aws-cci-poc/prod_live/${LATEST_BUILD_DIR}" "s3://iodev-aws-cci-poc/prod_live/current/"

            # Invalidate the CloudFront cache to serve the rolled-back build
            aws cloudfront create-invalidation \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --paths "/*"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - hold_for_rollback:
          type: approval
          requires:
            - deploy
          filters:
            branches:
              only: master
      - rollback:
          requires:
            - hold_for_rollback
          filters:
            branches:
              only: master
